______________________________________________________________ test_embeddings_endpoint_missing_headers ______________________________________________________________

embeddings_request = {'embed_id': 'test123', 'guardrail_id': 1, 'model_config_params': {'encoding_format': 'float'}, 'model_name': 'BAAI/bge-m3', ...}

    def test_embeddings_endpoint_missing_headers(embeddings_request):
        """Test the embeddings endpoint with missing headers."""
        headers = {"X-Session-ID": "session123", "X-Usecase-ID": "1234",}  # Missing X-Base-API-Key
        response = client.post(
            "/v1/api/embeddings",
            json=embeddings_request,
            headers=headers,
        )
        assert response.status_code == 400 or response.status_code == 422
>       assert response.json()["detail"] == "Missing X-Session-ID or X-Usecase-ID headers"
E       AssertionError: assert [{'loc': ['header', 'x-base-api-key'], 'msg': 'Field required', 'type': 'missing'}] == 'Missing X-Session-ID or X-Usecase-ID headers'

tests/unit/test_embeddings.py:59: AssertionError
_________________________________________________________________ test_guardrails_validation_failure _________________________________________________________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x127d27850>
embeddings_request = {'embed_id': 'test123', 'guardrail_id': 1, 'model_config_params': {'encoding_format': 'float'}, 'model_name': 'BAAI/bge-m3', ...}

    def test_guardrails_validation_failure(mocker, embeddings_request):
        """Test guardrails validation failure."""
        headers = {
            "X-Session-ID": "session123",
            "X-Usecase-ID": "1234",
            "X-Base-API-Key": "sk-MpFcAnO34r2gg5d1KA_QAg",
        }
    
        # Mock scan_prompt to return a failure response
        mocker.patch("src.utility.guardrails.scan_prompt", return_value={"is_valid": False})
    
        response = client.post(
            "/v1/api/embeddings",
            json=embeddings_request,
            headers=headers,
        )
>       assert response.status_code == 400
E       assert 200 == 400
E        +  where 200 = <Response [200 OK]>.status_code

tests/unit/test_embeddings.py:98: AssertionError
