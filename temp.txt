import pytest
from fastapi.testclient import TestClient
from src.main import app
from src.models.embeddings_input import EmbeddingsRequest

client = TestClient(app)


@pytest.fixture
def embeddings_request():
    """Fixture for a valid EmbeddingsRequest payload."""
    return {
        "emdedd_id": "test123",
        "user_input": "This is a test input.",
        "model_name": "test-model",
        "model_config_params": {"dimensions": 128, "encoding_format": "float"},
    }


def test_read_root():
    """Test the root endpoint."""
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"name": "Chat As Service, go to docs path for API detail"}


def test_health_check():
    """Test the health check endpoint."""
    response = client.get("/api/v1/health")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}


def test_embeddings_endpoint_valid_headers(embeddings_request):
    """Test the embeddings endpoint with valid headers."""
    headers = {
        "X-Session-ID": "session123",
        "X-Usecase-ID": "usecase123",
        "X-Base-API-Key": "test-api-key",
    }
    response = client.post(
        "/api/v1/embedding",
        json=embeddings_request,
        headers=headers,
    )
    assert response.status_code == 200 or response.status_code == 400


def test_embeddings_endpoint_missing_headers(embeddings_request):
    """Test the embeddings endpoint with missing headers."""
    headers = {"X-Session-ID": "session123"}  # Missing X-Usecase-ID
    response = client.post(
        "/api/v1/embedding",
        json=embeddings_request,
        headers=headers,
    )
    assert response.status_code == 400
    assert response.json()["detail"] == "Missing X-Session-ID or X-Usecase-ID headers"


def test_embeddings_endpoint_invalid_input():
    """Test the embeddings endpoint with invalid input."""
    headers = {
        "X-Session-ID": "session123",
        "X-Usecase-ID": "usecase123",
        "X-Base-API-Key": "test-api-key",
    }
    invalid_request = {
        "emdedd_id": "test123",
        "user_input": 12345,  # Invalid type
        "model_name": "test-model",
    }
    response = client.post(
        "/api/v1/embedding",
        json=invalid_request,
        headers=headers,
    )
    assert response.status_code == 422


def test_guardrails_validation_failure(mocker, embeddings_request):
    """Test guardrails validation failure."""
    headers = {
        "X-Session-ID": "session123",
        "X-Usecase-ID": "usecase123",
        "X-Base-API-Key": "test-api-key",
    }

    # Mock scan_prompt to return a failure response
    mocker.patch("src.utility.guardrails.scan_prompt", return_value={"is_valid": False})

    response = client.post(
        "/api/v1/embedding",
        json=embeddings_request,
        headers=headers,
    )
    assert response.status_code == 400
    assert response.json()["error"] == "Input Guardrails validation failed"
